/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREEN1VIEWBASE_HPP
#define SCREEN1VIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void Func_Front_Button()
    {
        // Override and implement this function in Screen1
    }
    virtual void Func_Open_Button()
    {
        // Override and implement this function in Screen1
    }
    virtual void Func_Close_Button()
    {
        // Override and implement this function in Screen1
    }
    virtual void Func_Left_Button()
    {
        // Override and implement this function in Screen1
    }
    virtual void Func_Right_Button()
    {
        // Override and implement this function in Screen1
    }
    virtual void Func_Back_Button()
    {
        // Override and implement this function in Screen1
    }
    virtual void Func_Up_Button()
    {
        // Override and implement this function in Screen1
    }
    virtual void Func_Down_Button()
    {
        // Override and implement this function in Screen1
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image image1;
    touchgfx::ButtonWithLabel Front_Button;
    touchgfx::ButtonWithLabel Open_Button;
    touchgfx::ButtonWithLabel Close_Button;
    touchgfx::ButtonWithLabel Left_Button;
    touchgfx::ButtonWithLabel Right_Button;
    touchgfx::ButtonWithLabel Back_Button;
    touchgfx::ButtonWithLabel Up_Button;
    touchgfx::ButtonWithLabel Down_Button;
    touchgfx::Circle Front_Limit_OFF;
    touchgfx::PainterRGB565 Front_Limit_OFFPainter;
    touchgfx::Circle Back_Limit_OFF;
    touchgfx::PainterRGB565 Back_Limit_OFFPainter;
    touchgfx::Circle Right_Limit_OFF;
    touchgfx::PainterRGB565 Right_Limit_OFFPainter;
    touchgfx::Circle Left_Limit_OFF;
    touchgfx::PainterRGB565 Left_Limit_OFFPainter;
    touchgfx::Circle Up_Limit_OFF;
    touchgfx::PainterRGB565 Up_Limit_OFFPainter;
    touchgfx::Circle Down_Limit_OFF;
    touchgfx::PainterRGB565 Down_Limit_OFFPainter;
    touchgfx::Circle Arm_Limit_OFF;
    touchgfx::PainterRGB565 Arm_Limit_OFFPainter;
    touchgfx::Circle Front_Limit_ON;
    touchgfx::PainterRGB565 Front_Limit_ONPainter;
    touchgfx::Circle Back_Limit_ON;
    touchgfx::PainterRGB565 Back_Limit_ONPainter;
    touchgfx::Circle Right_Limit_ON;
    touchgfx::PainterRGB565 Right_Limit_ONPainter;
    touchgfx::Circle Left_Limit_ON;
    touchgfx::PainterRGB565 Left_Limit_ONPainter;
    touchgfx::Circle Up_Limit_ON;
    touchgfx::PainterRGB565 Up_Limit_ONPainter;
    touchgfx::Circle Down_Limit_ON;
    touchgfx::PainterRGB565 Down_Limit_ONPainter;
    touchgfx::Circle Arm_Limit_ON;
    touchgfx::PainterRGB565 Arm_Limit_ONPainter;

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 12000;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Screen1ViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // SCREEN1VIEWBASE_HPP
